/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CollaborationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalizeVersion"
      | "getMemberEncryptedScore"
      | "getTotalEncryptedScore"
      | "getVersionCID"
      | "joinCollab"
      | "openCollaboration"
      | "protocolId"
      | "recordContribution"
      | "submitVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollaborationOpened"
      | "ContributionRecorded"
      | "Finalized"
      | "Joined"
      | "VersionSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "finalizeVersion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberEncryptedScore",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalEncryptedScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionCID",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCollab",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openCollaboration",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordContribution",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVersion",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemberEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinCollab", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openCollaboration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVersion",
    data: BytesLike
  ): Result;
}

export namespace CollaborationOpenedEvent {
  export type InputTuple = [songId: BigNumberish, opener: AddressLike];
  export type OutputTuple = [songId: bigint, opener: string];
  export interface OutputObject {
    songId: bigint;
    opener: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionRecordedEvent {
  export type InputTuple = [songId: BigNumberish, member: AddressLike];
  export type OutputTuple = [songId: bigint, member: string];
  export interface OutputObject {
    songId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [songId: BigNumberish, versionId: BigNumberish];
  export type OutputTuple = [songId: bigint, versionId: bigint];
  export interface OutputObject {
    songId: bigint;
    versionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedEvent {
  export type InputTuple = [songId: BigNumberish, member: AddressLike];
  export type OutputTuple = [songId: bigint, member: string];
  export interface OutputObject {
    songId: bigint;
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VersionSubmittedEvent {
  export type InputTuple = [
    songId: BigNumberish,
    versionId: BigNumberish,
    cid: string
  ];
  export type OutputTuple = [songId: bigint, versionId: bigint, cid: string];
  export interface OutputObject {
    songId: bigint;
    versionId: bigint;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CollaborationManager extends BaseContract {
  connect(runner?: ContractRunner | null): CollaborationManager;
  waitForDeployment(): Promise<this>;

  interface: CollaborationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalizeVersion: TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMemberEncryptedScore: TypedContractMethod<
    [songId: BigNumberish, member: AddressLike],
    [string],
    "view"
  >;

  getTotalEncryptedScore: TypedContractMethod<
    [songId: BigNumberish],
    [string],
    "view"
  >;

  getVersionCID: TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [string],
    "view"
  >;

  joinCollab: TypedContractMethod<[songId: BigNumberish], [void], "nonpayable">;

  openCollaboration: TypedContractMethod<
    [songId: BigNumberish, initialMembers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordContribution: TypedContractMethod<
    [songId: BigNumberish, scoreExt: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  submitVersion: TypedContractMethod<
    [songId: BigNumberish, versionCID: string],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalizeVersion"
  ): TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMemberEncryptedScore"
  ): TypedContractMethod<
    [songId: BigNumberish, member: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalEncryptedScore"
  ): TypedContractMethod<[songId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVersionCID"
  ): TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinCollab"
  ): TypedContractMethod<[songId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openCollaboration"
  ): TypedContractMethod<
    [songId: BigNumberish, initialMembers: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordContribution"
  ): TypedContractMethod<
    [songId: BigNumberish, scoreExt: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitVersion"
  ): TypedContractMethod<
    [songId: BigNumberish, versionCID: string],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "CollaborationOpened"
  ): TypedContractEvent<
    CollaborationOpenedEvent.InputTuple,
    CollaborationOpenedEvent.OutputTuple,
    CollaborationOpenedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionRecorded"
  ): TypedContractEvent<
    ContributionRecordedEvent.InputTuple,
    ContributionRecordedEvent.OutputTuple,
    ContributionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "VersionSubmitted"
  ): TypedContractEvent<
    VersionSubmittedEvent.InputTuple,
    VersionSubmittedEvent.OutputTuple,
    VersionSubmittedEvent.OutputObject
  >;

  filters: {
    "CollaborationOpened(uint256,address)": TypedContractEvent<
      CollaborationOpenedEvent.InputTuple,
      CollaborationOpenedEvent.OutputTuple,
      CollaborationOpenedEvent.OutputObject
    >;
    CollaborationOpened: TypedContractEvent<
      CollaborationOpenedEvent.InputTuple,
      CollaborationOpenedEvent.OutputTuple,
      CollaborationOpenedEvent.OutputObject
    >;

    "ContributionRecorded(uint256,address)": TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
    ContributionRecorded: TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;

    "Finalized(uint256,uint256)": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "Joined(uint256,address)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "VersionSubmitted(uint256,uint256,string)": TypedContractEvent<
      VersionSubmittedEvent.InputTuple,
      VersionSubmittedEvent.OutputTuple,
      VersionSubmittedEvent.OutputObject
    >;
    VersionSubmitted: TypedContractEvent<
      VersionSubmittedEvent.InputTuple,
      VersionSubmittedEvent.OutputTuple,
      VersionSubmittedEvent.OutputObject
    >;
  };
}
