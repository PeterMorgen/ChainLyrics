/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace LyricsRegistry {
  export type SongStruct = {
    id: BigNumberish;
    creator: AddressLike;
    title: string;
    lyricsCID: string;
    melodyCID: string;
    isCollaborative: boolean;
    collaborators: AddressLike[];
    createdAt: BigNumberish;
  };

  export type SongStructOutput = [
    id: bigint,
    creator: string,
    title: string,
    lyricsCID: string,
    melodyCID: string,
    isCollaborative: boolean,
    collaborators: string[],
    createdAt: bigint
  ] & {
    id: bigint;
    creator: string;
    title: string;
    lyricsCID: string;
    melodyCID: string;
    isCollaborative: boolean;
    collaborators: string[];
    createdAt: bigint;
  };
}

export interface LyricsRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createSong"
      | "getSong"
      | "nextSongId"
      | "setCollaborators"
      | "updateLyrics"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CollaboratorsSet" | "LyricsUpdated" | "SongCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createSong",
    values: [string, string, string, boolean, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextSongId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollaborators",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLyrics",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "createSong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextSongId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCollaborators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLyrics",
    data: BytesLike
  ): Result;
}

export namespace CollaboratorsSetEvent {
  export type InputTuple = [songId: BigNumberish, collaborators: AddressLike[]];
  export type OutputTuple = [songId: bigint, collaborators: string[]];
  export interface OutputObject {
    songId: bigint;
    collaborators: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LyricsUpdatedEvent {
  export type InputTuple = [songId: BigNumberish, newLyricsCID: string];
  export type OutputTuple = [songId: bigint, newLyricsCID: string];
  export interface OutputObject {
    songId: bigint;
    newLyricsCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SongCreatedEvent {
  export type InputTuple = [
    songId: BigNumberish,
    creator: AddressLike,
    title: string,
    lyricsCID: string,
    melodyCID: string,
    isCollaborative: boolean
  ];
  export type OutputTuple = [
    songId: bigint,
    creator: string,
    title: string,
    lyricsCID: string,
    melodyCID: string,
    isCollaborative: boolean
  ];
  export interface OutputObject {
    songId: bigint;
    creator: string;
    title: string;
    lyricsCID: string;
    melodyCID: string;
    isCollaborative: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LyricsRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): LyricsRegistry;
  waitForDeployment(): Promise<this>;

  interface: LyricsRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createSong: TypedContractMethod<
    [
      title: string,
      lyricsCID: string,
      melodyCID: string,
      isCollaborative: boolean,
      initialCollaborators: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  getSong: TypedContractMethod<
    [songId: BigNumberish],
    [LyricsRegistry.SongStructOutput],
    "view"
  >;

  nextSongId: TypedContractMethod<[], [bigint], "view">;

  setCollaborators: TypedContractMethod<
    [songId: BigNumberish, collaborators: AddressLike[]],
    [void],
    "nonpayable"
  >;

  updateLyrics: TypedContractMethod<
    [songId: BigNumberish, newLyricsCID: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createSong"
  ): TypedContractMethod<
    [
      title: string,
      lyricsCID: string,
      melodyCID: string,
      isCollaborative: boolean,
      initialCollaborators: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSong"
  ): TypedContractMethod<
    [songId: BigNumberish],
    [LyricsRegistry.SongStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextSongId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setCollaborators"
  ): TypedContractMethod<
    [songId: BigNumberish, collaborators: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLyrics"
  ): TypedContractMethod<
    [songId: BigNumberish, newLyricsCID: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CollaboratorsSet"
  ): TypedContractEvent<
    CollaboratorsSetEvent.InputTuple,
    CollaboratorsSetEvent.OutputTuple,
    CollaboratorsSetEvent.OutputObject
  >;
  getEvent(
    key: "LyricsUpdated"
  ): TypedContractEvent<
    LyricsUpdatedEvent.InputTuple,
    LyricsUpdatedEvent.OutputTuple,
    LyricsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SongCreated"
  ): TypedContractEvent<
    SongCreatedEvent.InputTuple,
    SongCreatedEvent.OutputTuple,
    SongCreatedEvent.OutputObject
  >;

  filters: {
    "CollaboratorsSet(uint256,address[])": TypedContractEvent<
      CollaboratorsSetEvent.InputTuple,
      CollaboratorsSetEvent.OutputTuple,
      CollaboratorsSetEvent.OutputObject
    >;
    CollaboratorsSet: TypedContractEvent<
      CollaboratorsSetEvent.InputTuple,
      CollaboratorsSetEvent.OutputTuple,
      CollaboratorsSetEvent.OutputObject
    >;

    "LyricsUpdated(uint256,string)": TypedContractEvent<
      LyricsUpdatedEvent.InputTuple,
      LyricsUpdatedEvent.OutputTuple,
      LyricsUpdatedEvent.OutputObject
    >;
    LyricsUpdated: TypedContractEvent<
      LyricsUpdatedEvent.InputTuple,
      LyricsUpdatedEvent.OutputTuple,
      LyricsUpdatedEvent.OutputObject
    >;

    "SongCreated(uint256,address,string,string,string,bool)": TypedContractEvent<
      SongCreatedEvent.InputTuple,
      SongCreatedEvent.OutputTuple,
      SongCreatedEvent.OutputObject
    >;
    SongCreated: TypedContractEvent<
      SongCreatedEvent.InputTuple,
      SongCreatedEvent.OutputTuple,
      SongCreatedEvent.OutputObject
    >;
  };
}
