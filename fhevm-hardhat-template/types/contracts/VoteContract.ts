/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VoteContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeVoting"
      | "getEncryptedVotes"
      | "openVoting"
      | "protocolId"
      | "voteForVersion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Voted" | "VotingClosed" | "VotingOpened"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closeVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedVotes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openVoting",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteForVersion",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteForVersion",
    data: BytesLike
  ): Result;
}

export namespace VotedEvent {
  export type InputTuple = [
    songId: BigNumberish,
    versionId: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [songId: bigint, versionId: bigint, voter: string];
  export interface OutputObject {
    songId: bigint;
    versionId: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingClosedEvent {
  export type InputTuple = [songId: BigNumberish];
  export type OutputTuple = [songId: bigint];
  export interface OutputObject {
    songId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingOpenedEvent {
  export type InputTuple = [songId: BigNumberish, versions: BigNumberish[]];
  export type OutputTuple = [songId: bigint, versions: bigint[]];
  export interface OutputObject {
    songId: bigint;
    versions: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoteContract extends BaseContract {
  connect(runner?: ContractRunner | null): VoteContract;
  waitForDeployment(): Promise<this>;

  interface: VoteContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeVoting: TypedContractMethod<
    [songId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEncryptedVotes: TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [string],
    "view"
  >;

  openVoting: TypedContractMethod<
    [songId: BigNumberish, versionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  voteForVersion: TypedContractMethod<
    [
      songId: BigNumberish,
      versionId: BigNumberish,
      oneExt: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeVoting"
  ): TypedContractMethod<[songId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEncryptedVotes"
  ): TypedContractMethod<
    [songId: BigNumberish, versionId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "openVoting"
  ): TypedContractMethod<
    [songId: BigNumberish, versionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voteForVersion"
  ): TypedContractMethod<
    [
      songId: BigNumberish,
      versionId: BigNumberish,
      oneExt: BytesLike,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingClosed"
  ): TypedContractEvent<
    VotingClosedEvent.InputTuple,
    VotingClosedEvent.OutputTuple,
    VotingClosedEvent.OutputObject
  >;
  getEvent(
    key: "VotingOpened"
  ): TypedContractEvent<
    VotingOpenedEvent.InputTuple,
    VotingOpenedEvent.OutputTuple,
    VotingOpenedEvent.OutputObject
  >;

  filters: {
    "Voted(uint256,uint256,address)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingClosed(uint256)": TypedContractEvent<
      VotingClosedEvent.InputTuple,
      VotingClosedEvent.OutputTuple,
      VotingClosedEvent.OutputObject
    >;
    VotingClosed: TypedContractEvent<
      VotingClosedEvent.InputTuple,
      VotingClosedEvent.OutputTuple,
      VotingClosedEvent.OutputObject
    >;

    "VotingOpened(uint256,uint256[])": TypedContractEvent<
      VotingOpenedEvent.InputTuple,
      VotingOpenedEvent.OutputTuple,
      VotingOpenedEvent.OutputObject
    >;
    VotingOpened: TypedContractEvent<
      VotingOpenedEvent.InputTuple,
      VotingOpenedEvent.OutputTuple,
      VotingOpenedEvent.OutputObject
    >;
  };
}
