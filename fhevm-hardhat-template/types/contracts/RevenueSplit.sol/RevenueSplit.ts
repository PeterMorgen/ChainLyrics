/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RevenueSplit {
  export type ShareStruct = { account: AddressLike; bps: BigNumberish };

  export type ShareStructOutput = [account: string, bps: bigint] & {
    account: string;
    bps: bigint;
  };
}

export interface RevenueSplitInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "distributeRevenue"
      | "getBalance"
      | "setShares"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Credited"
      | "Distributed"
      | "SharesSet"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "distributeRevenue",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShares",
    values: [BigNumberish, RevenueSplit.ShareStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CreditedEvent {
  export type InputTuple = [
    songId: BigNumberish,
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    songId: bigint,
    account: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    songId: bigint;
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributedEvent {
  export type InputTuple = [
    songId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [songId: bigint, token: string, amount: bigint];
  export interface OutputObject {
    songId: bigint;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesSetEvent {
  export type InputTuple = [
    songId: BigNumberish,
    shares: RevenueSplit.ShareStruct[]
  ];
  export type OutputTuple = [
    songId: bigint,
    shares: RevenueSplit.ShareStructOutput[]
  ];
  export interface OutputObject {
    songId: bigint;
    shares: RevenueSplit.ShareStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RevenueSplit extends BaseContract {
  connect(runner?: ContractRunner | null): RevenueSplit;
  waitForDeployment(): Promise<this>;

  interface: RevenueSplitInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  distributeRevenue: TypedContractMethod<
    [songId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  getBalance: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  setShares: TypedContractMethod<
    [songId: BigNumberish, shares: RevenueSplit.ShareStruct[]],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "distributeRevenue"
  ): TypedContractMethod<
    [songId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setShares"
  ): TypedContractMethod<
    [songId: BigNumberish, shares: RevenueSplit.ShareStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Credited"
  ): TypedContractEvent<
    CreditedEvent.InputTuple,
    CreditedEvent.OutputTuple,
    CreditedEvent.OutputObject
  >;
  getEvent(
    key: "Distributed"
  ): TypedContractEvent<
    DistributedEvent.InputTuple,
    DistributedEvent.OutputTuple,
    DistributedEvent.OutputObject
  >;
  getEvent(
    key: "SharesSet"
  ): TypedContractEvent<
    SharesSetEvent.InputTuple,
    SharesSetEvent.OutputTuple,
    SharesSetEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Credited(uint256,address,address,uint256)": TypedContractEvent<
      CreditedEvent.InputTuple,
      CreditedEvent.OutputTuple,
      CreditedEvent.OutputObject
    >;
    Credited: TypedContractEvent<
      CreditedEvent.InputTuple,
      CreditedEvent.OutputTuple,
      CreditedEvent.OutputObject
    >;

    "Distributed(uint256,address,uint256)": TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;
    Distributed: TypedContractEvent<
      DistributedEvent.InputTuple,
      DistributedEvent.OutputTuple,
      DistributedEvent.OutputObject
    >;

    "SharesSet(uint256,tuple[])": TypedContractEvent<
      SharesSetEvent.InputTuple,
      SharesSetEvent.OutputTuple,
      SharesSetEvent.OutputObject
    >;
    SharesSet: TypedContractEvent<
      SharesSetEvent.InputTuple,
      SharesSetEvent.OutputTuple,
      SharesSetEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
